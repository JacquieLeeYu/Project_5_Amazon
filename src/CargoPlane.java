import java.util.ArrayList;


/**
 * CS18000 Project 5 - Amazon
 *
 * <h1>CargoPlane</h1> Represents a Cargo Plane
 *
 * @author Jacquie Yu, Siddarth Pillai
 * @version 2018-12-06
 */
public class CargoPlane extends Vehicle {
    final double gasRate = 2.33;

    /**
     * Default Constructor
     */
    //============================================================================
    CargoPlane() {
        super();
    }

    //============================================================================

    /**
     * Constructor
     *
     * @param licensePlate license plate of vehicle
     * @param maxWeight    maximum weight that the vehicle can hold
     */
    //============================================================================
    public CargoPlane(String licensePlate, double maxWeight) {
        super(licensePlate, maxWeight);
    }

    //============================================================================

    /**
     * Overides its superclass method. Instead, after each iteration, the range will
     * increase by 10.
     *
     * @param warehousePackages List of packages to add from
     */
    @Override
    public void fill(ArrayList<Package> warehousePackages) {
        int diffCounter = 0;
        int checkOnce = -1;
        boolean checkTwice = false;
        boolean sameI = false;
        while (!isFull() && warehousePackages.size() != 0 && !checkTwice) {
            for (int i = 0; i < warehousePackages.size(); i++) {
                sameI = false;
                int destination = warehousePackages.get(i).getDestination().getZipCode();
                int difference = Math.abs(destination - this.getZipDest());
                if (difference <= diffCounter + 10 && difference >= diffCounter) {
                    if (!(warehousePackages.get(i).getWeight() +
                            getCurrentWeight() > getMaxWeight())) {
                        addPackage(warehousePackages.get(i));
                        setCurrentWeight(getCurrentWeight() + warehousePackages.get(i).getWeight());
                        warehousePackages.remove(i);
                        sameI = true;
                        break;
                    } else {
                        if (checkOnce == -1) {
                            checkOnce = i;
                        } else {
                            checkTwice = true;
                        }
                        sameI = true;
                    }
                }
            }
            if (!sameI) {
                diffCounter += 10;
            }
        }


    }

    /*
     * =============================================================================
     * | Methods from Profitable Interface
     * =============================================================================
     */

    /**
     * Returns the profits generated by the packages currently in the Cargo Plane.
     * <p>
     * &sum;p<sub>price</sub> - (range<sub>max</sub> &times; 2.33)
     * </p>
     */

    @Override
    public double getProfit() {
        double revenue = 0;
        int maxRange = 0;
        double cost = 0;
        if (getPackages().size() == 0) {
            return 0;
        }
        for (int i = 0; i < getPackages().size(); i++) {
            revenue += getPackages().get(i).getPrice();
            int zip = getPackages().get(i).getDestination().getZipCode();
            int distance = Math.abs(zip - getZipDest());
            if (distance > maxRange) {
//                System.out.println(distance);
//                System.out.println(distance % 10);
                if ((distance % 10 != 0)) {
                    maxRange = distance + (10 - (distance % 10));
                } else {
                    maxRange = distance;
                }
//                maxRange = distance;
//                System.out.println("maxRange set to " + maxRange);

            }
        }
        cost = maxRange * gasRate;

        double profits = revenue - cost;

        String letsTryRounding;
        double actualProfitsRounded;

        if (profits < 0) {
            letsTryRounding = String.format("%.2f", (profits * -1));
            actualProfitsRounded = Double.parseDouble(letsTryRounding) * -1;
        } else {
            letsTryRounding = String.format("%.2f", (profits));
            actualProfitsRounded = Double.parseDouble(letsTryRounding);
        }

        return (actualProfitsRounded);
    }

    /**
     * Generates a String of the Cargo Plane report. Cargo plane report includes:
     * <ul>
     * <li>License Plate No.</li>
     * <li>Destination</li>
     * <li>Current Weight/Maximum Weight</li>
     * <li>Net Profit</li>
     * <li>Shipping labels of all packages in cargo plane</li>
     * </ul>
     *
     * @return Cargo Plane Report
     */
    @Override
    public String report() {
        String license = "License Plate No.: " + getLicensePlate();
        String destination = "Destination: " + getZipDest();
        String weight = "Weight Load: " + getCurrentWeight() + "/" + getMaxWeight();
        String profit = String.format("Net Profit: ($%.2f)", getProfit());
        String labels = "=====Shipping Labels=====\n";
        for (int i = 0; i < getPackages().size(); i++) {
            labels += getPackages().get(i).shippingLabel();
        }
        labels = labels.concat("==============================");
        String report = "======== Cargo Plane Report =======\n"
                + license + "\n" + destination + "\n" + weight + "\n" + profit + "\n" + labels;
        return report;

    }


}